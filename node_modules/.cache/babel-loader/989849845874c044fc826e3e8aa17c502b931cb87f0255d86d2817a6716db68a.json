{"ast":null,"code":"import _regeneratorRuntime from\"C:/React Flask Chat bot/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _toConsumableArray from\"C:/React Flask Chat bot/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"C:/React Flask Chat bot/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/React Flask Chat bot/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import\"./App.css\";import\"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";import{useSpeechSynthesis}from\"react-speech-kit\";import{MainContainer,ChatContainer,MessageList,Message,MessageInput,TypingIndicator}from\"@chatscope/chat-ui-kit-react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState([{message:\"Hello I am Doc, how can I help you\",sender:\"Doc\"}]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var _useSpeechSynthesis=useSpeechSynthesis(),speak=_useSpeechSynthesis.speak;var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),typing=_useState4[0],setTyping=_useState4[1];//message below is event object\nvar handleSend=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(message){var newMessage,newMessages;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:newMessage={message:message,sender:\"user\",direction:\"outgoing\"};//update the messages array to display latest message\n//using below method because we cant update the state messages array using setMessages directly on message string\nnewMessages=[].concat(_toConsumableArray(messages),[newMessage]);setMessages(newMessages);setTyping(true);//set a typing indicator when bot types\n//send the message object to backend so that bot can respond\n_context.next=6;return processMessageToBot(newMessage,newMessages);case 6:case\"end\":return _context.stop();}},_callee);}));return function handleSend(_x){return _ref.apply(this,arguments);};}();//Defining the function to fetch and send data\nvar processMessageToBot=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(chatMessage,chatMessages){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(process.env.REACT_APP_URL,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(chatMessage)}).then(function(data){return data.json();}).then(function(data){setMessages([].concat(_toConsumableArray(chatMessages),[{message:data.message,sender:data.sender}]));speak({text:data.message});});case 2:setTyping(false);case 3:case\"end\":return _context2.stop();}},_callee2);}));return function processMessageToBot(_x2,_x3){return _ref2.apply(this,arguments);};}();//Initiallly the messages array will have this initial message\n//Each message is an object having two elements\n//then we render this array in MessagesList ui component to show the messages we have in the array\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"nav\",{class:\"navbar navbar-dark bg-dark\",children:/*#__PURE__*/_jsx(\"span\",{class:\"navbar-brand mx-3  mb-0 h1\",children:\"Doc Bot\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"container bot-box\",children:/*#__PURE__*/_jsx(MainContainer,{children:/*#__PURE__*/_jsxs(ChatContainer,{children:[/*#__PURE__*/_jsx(MessageList,{typingIndicator:typing?/*#__PURE__*/_jsx(TypingIndicator,{content:\"bot is typing\"}):null,children:messages.map(function(message,i){return/*#__PURE__*/_jsx(Message,{model:message},i);})}),/*#__PURE__*/_jsx(MessageInput,{placeholder:\"Ask me something...\",onSend:handleSend})]})})})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","useSpeechSynthesis","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsx","_jsx","jsxs","_jsxs","App","_useState","message","sender","_useState2","_slicedToArray","messages","setMessages","_useSpeechSynthesis","speak","_useState3","_useState4","typing","setTyping","handleSend","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newMessage","newMessages","wrap","_callee$","_context","prev","next","direction","concat","_toConsumableArray","processMessageToBot","stop","_x","apply","arguments","_ref2","_callee2","chatMessage","chatMessages","_callee2$","_context2","fetch","process","env","REACT_APP_URL","method","headers","body","JSON","stringify","then","data","json","text","_x2","_x3","className","children","class","typingIndicator","content","map","i","model","placeholder","onSend"],"sources":["C:/React Flask Chat bot/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  TypingIndicator,\n} from \"@chatscope/chat-ui-kit-react\";\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello I am Doc, how can I help you\",\n      sender: \"Doc\",\n    },\n  ]);\n\n  const { speak } = useSpeechSynthesis();\n\n  const [typing, setTyping] = useState(false);\n\n  //message below is event object\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\",\n    };\n\n    //update the messages array to display latest message\n    //using below method because we cant update the state messages array using setMessages directly on message string\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n\n    //set a typing indicator when bot types\n    //send the message object to backend so that bot can respond\n    await processMessageToBot(newMessage, newMessages);\n  };\n  //Defining the function to fetch and send data\n  const processMessageToBot = async (chatMessage, chatMessages) => {\n    await fetch(process.env.REACT_APP_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(chatMessage),\n    })\n      .then((data) => {\n        return data.json();\n      })\n      .then((data) => {\n        setMessages([\n          ...chatMessages,\n          {\n            message: data.message,\n            sender: data.sender,\n          },\n        ]);\n        speak({ text: data.message });\n      });\n    setTyping(false);\n  };\n\n  //Initiallly the messages array will have this initial message\n  //Each message is an object having two elements\n  //then we render this array in MessagesList ui component to show the messages we have in the array\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <span class=\"navbar-brand mx-3  mb-0 h1\">Doc Bot</span>\n      </nav>\n      <div className=\"container bot-box\">\n        <MainContainer>\n          <ChatContainer>\n            <MessageList\n              typingIndicator={\n                typing ? <TypingIndicator content=\"bot is typing\" /> : null\n              }\n            >\n              {messages.map((message, i) => {\n                return <Message key={i} model={message} />;\n              })}\n            </MessageList>\n            <MessageInput\n              placeholder=\"Ask me something...\"\n              onSend={handleSend}\n            />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}