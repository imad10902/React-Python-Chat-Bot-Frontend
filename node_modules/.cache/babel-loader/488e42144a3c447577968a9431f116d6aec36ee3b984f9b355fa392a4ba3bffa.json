{"ast":null,"code":"var _jsxFileName = \"C:\\\\React Flask Chat bot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello I am Doc, how can I help you\",\n    sender: \"Doc\"\n  }]);\n  const {\n    speak\n  } = useSpeechSynthesis();\n  const [typing, setTyping] = useState(false);\n\n  //message below is event object\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n\n    //update the messages array to display latest message\n    //using below method because we cant update the state messages array using setMessages directly on message string\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n\n    //set a typing indicator when bot types\n    //send the message object to backend so that bot can respond\n    await processMessageToBot(newMessage, newMessages);\n  };\n  //Defining the function to fetch and send data\n  const processMessageToBot = async (chatMessage, chatMessages) => {\n    await fetch(\"http://127.0.0.1:5000\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(chatMessage)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      setMessages([...chatMessages, {\n        message: data.message,\n        sender: data.sender\n      }]);\n      speak({\n        text: data.message\n      });\n    });\n    setTyping(false);\n  };\n\n  //Initiallly the messages array will have this initial message\n  //Each message is an object having two elements\n  //then we render this array in MessagesList ui component to show the messages we have in the array\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      class: \"navbar navbar-light bg-dark my-1\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        class: \"navbar-brand\",\n        href: \"#\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/docs/4.1/assets/brand/bootstrap-solid.svg\",\n          width: \"30\",\n          height: \"30\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        position: \"relative\",\n        height: \"650px\",\n        width: \"1450px\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"bot is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 26\n            }, this) : null,\n            children: messages.map((message, i) => {\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Ask me something...\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FRqPRhA4ivjhUlm7V2TdAfsI00k=\", false, function () {\n  return [useSpeechSynthesis];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useSpeechSynthesis","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","App","_s","messages","setMessages","message","sender","speak","typing","setTyping","handleSend","newMessage","direction","newMessages","processMessageToBot","chatMessage","chatMessages","fetch","method","headers","body","JSON","stringify","then","data","json","text","className","children","class","href","src","width","height","alt","fileName","_jsxFileName","lineNumber","columnNumber","style","position","justifyContent","alignItems","typingIndicator","content","map","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["C:/React Flask Chat bot/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  TypingIndicator,\n} from \"@chatscope/chat-ui-kit-react\";\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello I am Doc, how can I help you\",\n      sender: \"Doc\",\n    },\n  ]);\n\n  const { speak } = useSpeechSynthesis();\n\n  const [typing, setTyping] = useState(false);\n\n  //message below is event object\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\",\n    };\n\n    //update the messages array to display latest message\n    //using below method because we cant update the state messages array using setMessages directly on message string\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n\n    //set a typing indicator when bot types\n    //send the message object to backend so that bot can respond\n    await processMessageToBot(newMessage, newMessages);\n  };\n  //Defining the function to fetch and send data\n  const processMessageToBot = async (chatMessage, chatMessages) => {\n    await fetch(\"http://127.0.0.1:5000\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(chatMessage),\n    })\n      .then((data) => {\n        return data.json();\n      })\n      .then((data) => {\n        setMessages([\n          ...chatMessages,\n          {\n            message: data.message,\n            sender: data.sender,\n          },\n        ]);\n        speak({ text: data.message });\n      });\n    setTyping(false);\n  };\n\n  //Initiallly the messages array will have this initial message\n  //Each message is an object having two elements\n  //then we render this array in MessagesList ui component to show the messages we have in the array\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-light bg-dark my-1\">\n        <a class=\"navbar-brand\" href=\"#\">\n          <img\n            src=\"/docs/4.1/assets/brand/bootstrap-solid.svg\"\n            width=\"30\"\n            height=\"30\"\n            alt=\"\"\n          />\n        </a>\n      </nav>\n      <div\n      className=\"container\"\n        style={{\n          position: \"relative\",\n          height: \"650px\",\n          width: \"1450px\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <MainContainer>\n          <ChatContainer>\n            <MessageList\n              typingIndicator={\n                typing ? <TypingIndicator content=\"bot is typing\" /> : null\n              }\n            >\n              {messages.map((message, i) => {\n                return <Message key={i} model={message} />;\n              })}\n            </MessageList>\n            <MessageInput\n              placeholder=\"Ask me something...\"\n              onSend={handleSend}\n            />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}