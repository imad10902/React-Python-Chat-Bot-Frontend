{"ast":null,"code":"var _jsxFileName = \"C:\\\\React Flask Chat bot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello I am health bot\",\n    sender: \"Doc\"\n  }]);\n  const [typing, setTyping] = useState(false);\n\n  //message below is event object\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: 'outgoing'\n    };\n\n    //update the messages array to display latest message\n    //using below method because we cant update the state messages array using setMessages directly on message string\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n\n    //set a typing indicator when bot types\n    //send the message object to backend so that bot can respond\n    await processMessageToBot(newMessages);\n  };\n  //Now making the function to fetch and send data\n  const processMessageToBot = async chatMessages => {\n    //chatMessages {sender: \"user\"or \"Doc\", message:\"The message content here\"}\n    //apiMessages {role: \"user\" or \"assistant\", content: \"The message content here\"}\n\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"Doc\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"messages\": [...apiMessages //[message 1, message 2, message 3]\n      ]\n    };\n\n    await fetch(\"http://127.0.0.1:5000\", {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      setMessages(...chatMessages, data);\n    });\n  };\n\n  //Initiallly the messages array will have this initial message \n  //Each message is an object having two elements\n  //then we render this array in MessagesList ui component to show the messages we have in the array\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"bot is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 49\n            }, this) : null,\n            children: messages.map((message, i) => {\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 22\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Ask me something\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M3SATTedQIrRF06Cy1pZaOHp3hk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","App","_s","messages","setMessages","message","sender","typing","setTyping","handleSend","newMessage","direction","newMessages","processMessageToBot","chatMessages","apiMessages","map","messageObject","role","content","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","className","children","style","position","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["C:/React Flask Chat bot/frontend/src/App.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n\nfunction App() {\nconst [messages, setMessages]=useState([\n  {\n    message: \"Hello I am health bot\",\n    sender:\"Doc\"\n  }\n]);\n\nconst [typing, setTyping]= useState(false)\n\n//message below is event object\nconst handleSend=async(message)=>{\n  const newMessage={\n    message: message,\n    sender: \"user\",\n    direction: 'outgoing'\n  }\n\n//update the messages array to display latest message\n//using below method because we cant update the state messages array using setMessages directly on message string\nconst newMessages= [...messages, newMessage]\nsetMessages(newMessages)\nsetTyping(true)\n\n\n//set a typing indicator when bot types\n//send the message object to backend so that bot can respond\nawait processMessageToBot(newMessages);\n}\n//Now making the function to fetch and send data\nconst processMessageToBot= async(chatMessages)=>{\n  //chatMessages {sender: \"user\"or \"Doc\", message:\"The message content here\"}\n  //apiMessages {role: \"user\" or \"assistant\", content: \"The message content here\"}\n\n  let apiMessages= chatMessages.map((messageObject)=>{\n    let role= \"\";\n    if(messageObject.sender === \"Doc\") {\n      role=\"assistant\"\n    } else{\n      role=\"user\"\n    }\n    return { role: role, content:messageObject.message }\n  });\n\n  const apiRequestBody ={\n    \"messages\": [\n      ...apiMessages//[message 1, message 2, message 3]\n    ]\n  }\n\n  await fetch(\"http://127.0.0.1:5000\", {\n    method: 'POST',\n    headers:{\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(apiRequestBody)\n  }).then((data)=>{\n    setMessages(...chatMessages, data)\n  })\n}\n\n//Initiallly the messages array will have this initial message \n//Each message is an object having two elements\n//then we render this array in MessagesList ui component to show the messages we have in the array\n  return (\n    <div className=\"App\">\n     <div style={{position:\"relative\"}}>\n      <MainContainer>\n        <ChatContainer>\n          <MessageList typingIndicator={typing? <TypingIndicator content=\"bot is typing\"/>: null}>\n            {messages.map((message, i)=>{\n              return <Message key={i} model={message}/>\n            })}\n          </MessageList>\n          <MessageInput  placeholder='Ask me something' onSend={handleSend}/>\n        </ChatContainer>\n      </MainContainer>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}