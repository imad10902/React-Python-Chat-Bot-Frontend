[{"C:\\React Flask Chat bot\\frontend\\src\\index.js":"1","C:\\React Flask Chat bot\\frontend\\src\\App.js":"2","C:\\React Flask Chat bot\\frontend\\src\\reportWebVitals.js":"3"},{"size":535,"mtime":1685978218086,"results":"4","hashOfConfig":"5"},{"size":2848,"mtime":1686151683677,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1685978218173,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"moltie",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"C:\\React Flask Chat bot\\frontend\\src\\index.js",[],[],[],"C:\\React Flask Chat bot\\frontend\\src\\App.js",["19"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  TypingIndicator,\n} from \"@chatscope/chat-ui-kit-react\";\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello I am Doc, how can I help you\",\n      sender: \"Doc\",\n    },\n  ]);\n\n  const { speak } = useSpeechSynthesis();\n\n  const [typing, setTyping] = useState(false);\n\n  //message below is event object\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\",\n    };\n\n    //update the messages array to display latest message\n    //using below method because we cant update the state messages array using setMessages directly on message string\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n\n    //set a typing indicator when bot types\n    //send the message object to backend so that bot can respond\n    await processMessageToBot(newMessage, newMessages);\n  };\n  //Defining the function to fetch and send data\n  const processMessageToBot = async (chatMessage, chatMessages) => {\n    await fetch(process.env.REACT_APP_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(chatMessage),\n    })\n      .then((data) => {\n        return data.json();\n      })\n      .then((data) => {\n        setMessages([\n          ...chatMessages,\n          {\n            message: data.message,\n            sender: data.sender,\n          },\n        ]);\n        speak({ text: data.message });\n      });\n    setTyping(false);\n  };\n\n  //Initiallly the messages array will have this initial message\n  //Each message is an object having two elements\n  //then we render this array in MessagesList ui component to show the messages we have in the array\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <span class=\"navbar-brand mx-3  mb-0 h1\">Doc Bot</span>\n      </nav>\n      <div className=\"container bot-box\">\n        <MainContainer>\n          <ChatContainer>\n            <MessageList\n              typingIndicator={\n                typing ? <TypingIndicator content=\"bot is typing\" /> : null\n              }\n            >\n              {messages.map((message, i) => {\n                return <Message key={i} model={message} />;\n              })}\n            </MessageList>\n            <MessageInput\n              placeholder=\"Ask me something...\"\n              onSend={handleSend}\n            />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\React Flask Chat bot\\frontend\\src\\reportWebVitals.js",[],[],{"ruleId":"20","severity":1,"message":"21","line":1,"column":17,"nodeType":"22","messageId":"23","endLine":1,"endColumn":26},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar"]